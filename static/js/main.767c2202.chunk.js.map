{"version":3,"sources":["FormAddMovie.js","App.js","serviceWorker.js","index.js"],"names":["FormAddMovie","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","name","poster","comment","onChange","bind","assertThisInitialized","submitForm","fetchData","_this2","config","method","headers","Content-Type","body","JSON","stringify","fetch","then","res","json","error","alert","concat","catch","e","console","setState","defineProperty","target","value","preventDefault","react_default","a","createElement","Container","className","Form","Row","Col","lg","size","offset","FormGroup","Label","for","Input","type","id","placeholder","FormText","Button","color","onClick","React","Component","App","FormAddMovie_FormAddMovie","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kWAIqBA,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,KAAM,GACNC,OAAQ,GACRC,QAAS,IAEXV,EAAKW,SAAWX,EAAKW,SAASC,KAAdX,OAAAY,EAAA,EAAAZ,CAAAD,IAChBA,EAAKc,WAAad,EAAKc,WAAWF,KAAhBX,OAAAY,EAAA,EAAAZ,CAAAD,IAClBA,EAAKe,UAAYf,EAAKe,UAAUH,KAAfX,OAAAY,EAAA,EAAAZ,CAAAD,IATAA,2EAYP,IAAAgB,EAAAb,KACJc,EAAS,CACbC,OAAQ,OACRC,QAAS,CACPC,eAAgB,mCAElBC,KAAMC,KAAKC,UAAUpB,KAAKI,QAI5BiB,MAFY,qDAEDP,GACRQ,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAC,GACAA,EAAIE,MACNC,MAAMH,EAAIE,OAEVC,MAAK,SAAAC,OAAUd,EAAKT,MAAMC,KAArB,4BAAAsB,OAAoDd,EAAKT,MAAMG,QAA/D,QAENqB,MAAM,SAAAC,GACPC,QAAQL,MAAMI,GACdH,MAAM,+DAIHG,GACP7B,KAAK+B,SAALjC,OAAAkC,EAAA,EAAAlC,CAAA,GACG+B,EAAEI,OAAO5B,KAAOwB,EAAEI,OAAOC,2CAInBL,GACTA,EAAEM,iBACFnC,KAAKY,6CAIL,OACEwB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBACbJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cAAd,kCACAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,KACEL,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1BV,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,IAAI,QAAX,SACAb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,KAAK,OAAO9C,KAAK,OAAO+C,GAAG,OAAO5C,SAAUR,KAAKQ,SAAU0B,MAAOlC,KAAKI,MAAMC,SAGxF+B,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,IACfT,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,IAAI,UAAX,eACAb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,KAAK,OAAO9C,KAAK,SAAS+C,GAAG,SAASC,YAAY,UAAU7C,SAAUR,KAAKQ,SAAU0B,MAAOlC,KAAKI,MAAME,YAIpH8B,EAAAC,EAAAC,cAACI,EAAA,EAAD,KACEN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1BV,EAAAC,EAAAC,cAACS,EAAA,EAAD,KACEX,EAAAC,EAAAC,cAACU,EAAA,EAAD,CAAOC,IAAI,WAAX,YACAb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CAAOC,KAAK,WAAW9C,KAAK,UAAU+C,GAAG,UAAU5C,SAAUR,KAAKQ,SAAU0B,MAAOlC,KAAKI,MAAMG,UAC9F6B,EAAAC,EAAAC,cAACgB,EAAA,EAAD,qEAEFlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAQC,MAAM,UAAUL,KAAK,SAASM,QAASzD,KAAKW,YAApD,oBA3E0B+C,IAAMC,WCQjCC,MARf,WACE,OACExB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACuB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpD,KAAK,SAAAqD,GACjCA,EAAaC","file":"static/js/main.767c2202.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Button, Form, FormGroup, Label, Input, FormText, Container, Col, Row } from 'reactstrap';\n\nexport default class FormAddMovie extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      poster: '',\n      comment: ''\n    };\n    this.onChange = this.onChange.bind(this);\n    this.submitForm = this.submitForm.bind(this);\n    this.fetchData = this.fetchData.bind(this);\n  }\n\n  fetchData() {\n    const config = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json; charset=UTF-8\"\n      },\n      body: JSON.stringify(this.state)\n    };\n    const url = \"http://campus-bordeaux.ovh:3001/api/quests/movies/\";\n\n    fetch(url, config)\n      .then(res => res.json())\n      .then(res => {\n        if (res.error) {\n          alert(res.error);\n        } else {\n          alert(`Added ${this.state.name} film with the comment: ${this.state.comment}!`);\n        }\n      }).catch(e => {\n        console.error(e);\n        alert('Error during film adding');\n      });\n  }\n\n  onChange(e) {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  }\n\n  submitForm(e) {\n    e.preventDefault();\n    this.fetchData();\n  }\n\n  render() {\n    return (\n      <Container>\n        <div className=\"FormAddMovie\">\n          <h1 className=\"text-muted\">Tell about your favourite film</h1>\n          <Form>\n            <Row>\n              <Col lg={{ size: 4, offset: 2 }}>\n                <FormGroup>\n                  <Label for=\"name\">Film:</Label>\n                  <Input type=\"text\" name=\"name\" id=\"name\" onChange={this.onChange} value={this.state.name} />\n                </FormGroup>\n              </Col>\n              <Col lg={{ size: 4 }}>\n                <FormGroup>\n                  <Label for=\"poster\">Poster URL:</Label>\n                  <Input type=\"text\" name=\"poster\" id=\"poster\" placeholder=\"http://\" onChange={this.onChange} value={this.state.poster} />\n                </FormGroup>\n              </Col>\n            </Row>\n            <Row>\n              <Col lg={{ size: 8, offset: 2 }}>\n                <FormGroup>\n                  <Label for=\"comment\">Comment:</Label>\n                  <Input type=\"textarea\" name=\"comment\" id=\"comment\" onChange={this.onChange} value={this.state.comment} />\n                  <FormText>Why do you like this film? What impressed you in this film?</FormText>\n                </FormGroup>\n                <Button color=\"success\" type=\"submit\" onClick={this.submitForm}>Send</Button>\n              </Col>\n            </Row>\n          </Form>\n        </div>\n      </Container >\n    );\n  }\n}","import React from 'react';\nimport FormAddMovie from './FormAddMovie';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <FormAddMovie />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}